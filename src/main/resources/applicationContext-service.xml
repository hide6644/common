<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
    default-lazy-init="true">

    <!-- =================================================================== -->
    <!-- AOP: Configuration and Aspects                                      -->
    <!-- =================================================================== -->
    <aop:config>
        <aop:advisor id="userManagerTx" advice-ref="userManagerTxAdvice" pointcut="execution(* *..service.UserManager.*(..))" order="0" />
        <aop:advisor id="userManagerSecurity" advice-ref="userSecurityAdvice" pointcut="execution(* *..service.UserManager.saveUser(..))" order="1" />
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* *..service.*Manager.*(..))" order="2" />
    </aop:config>

    <!-- Enable @Transactional support -->
    <tx:annotation-driven />

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy />

    <!-- Activates scanning of @Autowired -->
    <context:annotation-config />

    <!-- Activates scanning of @Service -->
    <context:component-scan base-package="common.service,common.validator" />

    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <tx:advice id="userManagerTxAdvice">
        <tx:attributes>
            <tx:method name="save*" rollback-for="DBException" />
        </tx:attributes>
    </tx:advice>

    <bean id="userSecurityAdvice" class="common.service.UserSecurityAdvice" />

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

    <!-- =================================================================== -->
    <!-- Mail: Sender and FreeMarker configuration                             -->
    <!-- =================================================================== -->
    <bean id="mailEngine" class="common.service.mail.MailEngine">
        <property name="mailSender" ref="mailSender" />
        <property name="freemarkerConfiguration" ref="freemarkerConfiguration" />
        <property name="from" value="${mail.default.from}" />
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>

    <!-- Configure freemarker for sending e-mail -->
    <bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="classpath:/META-INF/freemarker/" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>

    <bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage" scope="prototype">
        <property name="from" value="${mail.default.from}" />
    </bean>

    <!-- =================================================================== -->
    <!-- Security class from Spring Security - used to configure Password    -->
    <!-- Encryption in UserManagerImpl. Can override in security.xml.        -->
    <!-- =================================================================== -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <!-- Password reset token encoder -->
    <bean id="passwordTokenEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder" />

</beans>
